name: Deploy to EC2

on:
  push:
    branches: [main, staging]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          # Determine environment based on branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV="production"
            PORT="3001"
          else
            ENV="staging"
            PORT="3000"
          fi

          echo "Deploying to $ENV environment on port $PORT"

          # Create parent directory and deployment directory with proper permissions
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo mkdir -p /opt/pharma-tracker-api && sudo chown ubuntu:ubuntu /opt/pharma-tracker-api"
          ssh ubuntu@${{ secrets.EC2_HOST }} "mkdir -p /opt/pharma-tracker-api/$ENV"

          # Verify Node.js and npm are available
          ssh ubuntu@${{ secrets.EC2_HOST }} "export PATH=\$PATH:/usr/bin:/usr/local/bin && node --version && npm --version"

          # Copy built files
          scp -r dist/* ubuntu@${{ secrets.EC2_HOST }}:/opt/pharma-tracker-api/$ENV/

          # Copy package.json for dependencies
          scp package.json ubuntu@${{ secrets.EC2_HOST }}:/opt/pharma-tracker-api/$ENV/

          # Copy environment file and replace sensitive values
          scp env.$ENV ubuntu@${{ secrets.EC2_HOST }}:/opt/pharma-tracker-api/$ENV/.env

          # Replace sensitive values with secrets
          ssh ubuntu@${{ secrets.EC2_HOST }} "sed -i 's/will-be-replaced-at-deployment/${{ secrets.DB_PASSWORD }}/g' /opt/pharma-tracker-api/$ENV/.env"
          ssh ubuntu@${{ secrets.EC2_HOST }} "sed -i 's/will-be-replaced-at-deployment/${{ secrets.JWT_SECRET }}/g' /opt/pharma-tracker-api/$ENV/.env"

          # Install production dependencies on EC2
          ssh ubuntu@${{ secrets.EC2_HOST }} "cd /opt/pharma-tracker-api/$ENV && export PATH=\$PATH:/usr/bin:/usr/local/bin && npm ci --only=production"

          # Stop existing service if running
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl stop pharma-tracker-$ENV || true"

          # Create systemd service file
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo tee /etc/systemd/system/pharma-tracker-$ENV.service > /dev/null << 'EOF'
          [Unit]
          Description=Pharma Tracker API - $ENV
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/opt/pharma-tracker-api/$ENV
          Environment=NODE_ENV=$ENV
          ExecStart=/usr/bin/node dist/main.js
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
          EOF"

          # Reload systemd and start service
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl daemon-reload && sudo systemctl enable pharma-tracker-$ENV && sudo systemctl start pharma-tracker-$ENV"

          # Wait for service to start
          sleep 10

          # Check service status
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl status pharma-tracker-$ENV --no-pager"

          echo "Deployment to $ENV completed successfully!"
