name: Deploy to EC2

on:
  push:
    branches: [main, staging]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          # Determine environment based on branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV="production"
            PORT="3001"
          else
            ENV="staging"
            PORT="3000"
          fi

          echo "Deploying to $ENV environment on port $PORT"

          echo "📁 Creating deployment directories..."
          # Create parent directory and deployment directory with proper permissions
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo mkdir -p /opt/pharma-tracker-api && sudo chown ubuntu:ubuntu /opt/pharma-tracker-api"
          ssh ubuntu@${{ secrets.EC2_HOST }} "mkdir -p /opt/pharma-tracker-api/$ENV"
          echo "✅ Directories created successfully"

          echo "💾 Checking available disk space..."
          # Check available disk space and fail if less than 10%
          DISK_USAGE=$(ssh ubuntu@${{ secrets.EC2_HOST }} "df /opt/pharma-tracker-api | tail -1 | awk '{print \$5}' | sed 's/%//'")
          AVAILABLE_SPACE=$((100 - DISK_USAGE))
          echo "📊 Current disk usage: ${DISK_USAGE}%, Available: ${AVAILABLE_SPACE}%"

          if [ "$AVAILABLE_SPACE" -lt 10 ]; then
            echo "❌ ERROR: Insufficient disk space! Only ${AVAILABLE_SPACE}% available, need at least 10%"
            echo "Please free up disk space on EC2 instance before deploying"
            exit 1
          fi
          echo "✅ Sufficient disk space available (${AVAILABLE_SPACE}%)"

          echo "🔍 Verifying Node.js and npm availability..."
          # Verify Node.js and npm are available
          ssh ubuntu@${{ secrets.EC2_HOST }} "export PATH=\$PATH:/usr/bin:/usr/local/bin && node --version && npm --version"

          # Check Node.js version compatibility
          NODE_VERSION=$(ssh ubuntu@${{ secrets.EC2_HOST }} "export PATH=\$PATH:/usr/bin:/usr/local/bin && node --version | cut -d'v' -f2 | cut -d'.' -f1")
          if [ "$NODE_VERSION" -lt 20 ]; then
            echo "❌ ERROR: Node.js version 20+ required, but found version $NODE_VERSION"
            echo "Please upgrade Node.js on EC2 instance"
            exit 1
          fi
          echo "✅ Node.js and npm verified (version 20+)"

          echo "📦 Copying built application files..."
          # Copy built files (preserve dist structure)
          ssh ubuntu@${{ secrets.EC2_HOST }} "mkdir -p /opt/pharma-tracker-api/$ENV/dist"
          scp -r dist/* ubuntu@${{ secrets.EC2_HOST }}:/opt/pharma-tracker-api/$ENV/dist/
          echo "✅ Application files copied"

          echo "📋 Copying package files..."
          # Copy package.json and package-lock.json for dependencies
          scp package.json package-lock.json ubuntu@${{ secrets.EC2_HOST }}:/opt/pharma-tracker-api/$ENV/
          echo "✅ Package files copied"

          echo "⚙️ Setting up environment configuration..."
          # Copy environment file and replace sensitive values
          scp env.$ENV ubuntu@${{ secrets.EC2_HOST }}:/opt/pharma-tracker-api/$ENV/env.$ENV
          echo "✅ Environment file copied"

          echo "🔐 Injecting secrets into environment file..."
          # Replace sensitive values with secrets (using | as delimiter to handle special characters like /)
          ssh ubuntu@${{ secrets.EC2_HOST }} "sed -i 's|DB_PASSWORD_PLACEHOLDER|${{ secrets.DB_PASSWORD }}|g' /opt/pharma-tracker-api/$ENV/env.$ENV"
          ssh ubuntu@${{ secrets.EC2_HOST }} "sed -i 's|JWT_SECRET_PLACEHOLDER|${{ secrets.JWT_SECRET }}|g' /opt/pharma-tracker-api/$ENV/env.$ENV"
          ssh ubuntu@${{ secrets.EC2_HOST }} "sed -i 's|AWS_ACCESS_KEY_PLACEHOLDER|${{ secrets.AWS_ACCESS_KEY }}|g' /opt/pharma-tracker-api/$ENV/env.$ENV"
          ssh ubuntu@${{ secrets.EC2_HOST }} "sed -i 's|AWS_SECRET_KEY_PLACEHOLDER|${{ secrets.AWS_SECRET_KEY }}|g' /opt/pharma-tracker-api/$ENV/env.$ENV"
          echo "✅ Secrets injected successfully"

          echo "📥 Installing production dependencies..."
          # Install production dependencies on EC2
          ssh ubuntu@${{ secrets.EC2_HOST }} "cd /opt/pharma-tracker-api/$ENV && export PATH=\$PATH:/usr/bin:/usr/local/bin && npm ci --omit=dev"
          echo "✅ Dependencies installed"

          echo "🛑 Stopping existing service (if running)..."
          # Stop existing service if running
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl stop pharma-tracker-$ENV || true"
          echo "✅ Service stopped"

          echo "🔧 Creating systemd service file..."
          # Create systemd service file
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo tee /etc/systemd/system/pharma-tracker-$ENV.service > /dev/null << 'EOF'
          [Unit]
          Description=Pharma Tracker API - $ENV
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/opt/pharma-tracker-api/$ENV
          Environment=NODE_ENV=$ENV
          ExecStart=/usr/bin/node dist/main.js
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
          EOF"
          echo "✅ Service file created"

          echo "🔄 Reloading systemd and starting service..."
          # Reload systemd and start service
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl daemon-reload && sudo systemctl enable pharma-tracker-$ENV && sudo systemctl start pharma-tracker-$ENV"
          echo "✅ Service started"

          echo "⏳ Waiting for service to fully start..."
          # Wait for service to start
          sleep 10
          echo "✅ Wait period completed"

          echo "📊 Checking service status..."
          # Check service status
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl status pharma-tracker-$ENV --no-pager"
          echo "✅ Service status checked"

          echo "🔍 Checking service logs for errors..."
          # Check recent logs for error details
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo journalctl -u pharma-tracker-$ENV --no-pager -n 20"
          echo "✅ Service logs checked"

          echo "🔍 Checking if port is in use..."
          # Check if port is already in use
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo netstat -tlnp | grep :$PORT || echo 'Port $PORT is available'"
          echo "✅ Port availability checked"

          echo "🔍 Checking application directory and files..."
          # Check if all files are in place
          ssh ubuntu@${{ secrets.EC2_HOST }} "ls -la /opt/pharma-tracker-api/$ENV/"
          echo "✅ Directory contents checked"

          echo "🧪 Testing application startup manually..."
          # Try to start the app manually to see detailed error
          ssh ubuntu@${{ secrets.EC2_HOST }} "cd /opt/pharma-tracker-api/$ENV && timeout 10s node dist/main.js || echo 'Manual startup test completed'"
          echo "✅ Manual startup test completed"

          echo "🌐 Deploying Nginx configuration..."
          # Copy Nginx configuration file
          scp nginx/nginx.conf ubuntu@${{ secrets.EC2_HOST }}:/tmp/nginx.conf
          # Deploy Nginx configuration
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo cp /tmp/nginx.conf /etc/nginx/sites-available/pharmatracker && sudo ln -sf /etc/nginx/sites-available/pharmatracker /etc/nginx/sites-enabled/ && sudo rm -f /etc/nginx/sites-enabled/default"
          echo "✅ Nginx configuration deployed"

          echo "🌐 Ensuring Nginx is running..."
          # Start Nginx if not running, restart if already running
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl is-active nginx || sudo systemctl start nginx"
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo systemctl enable nginx"
          # Test and reload Nginx configuration
          ssh ubuntu@${{ secrets.EC2_HOST }} "sudo nginx -t && sudo systemctl reload nginx"
          echo "✅ Nginx is running and enabled with new configuration"

          echo "🧹 Cleaning up deployment artifacts..."
          # Clean up temporary files
          ssh ubuntu@${{ secrets.EC2_HOST }} "rm -f /tmp/nginx.conf"
          echo "✅ Temporary files cleaned"

          echo "🗂️ Cleaning up old deployment files..."
          # Remove old dist and node_modules to save space
          ssh ubuntu@${{ secrets.EC2_HOST }} "cd /opt/pharma-tracker-api/$ENV && rm -rf dist.old node_modules.old env.old 2>/dev/null || true"
          echo "✅ Old deployment files cleaned"

          echo "💾 Checking disk space..."
          # Check available disk space
          ssh ubuntu@${{ secrets.EC2_HOST }} "df -h /opt/pharma-tracker-api"
          echo "✅ Disk space checked"

          echo "🎉 Deployment to $ENV completed successfully!"
